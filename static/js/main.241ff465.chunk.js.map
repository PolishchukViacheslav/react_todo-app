{"version":3,"sources":["components/AddTodo.js","components/Header.js","components/Todo.js","components/Shapes.js","components/TodoList.js","components/Filter.js","components/Filters.js","components/TodoApp.js","App.js","index.js"],"names":["AddTodo","state","value","onChange","event","target","setState","trimStart","onSubmit","preventDefault","addTodo","props","todo","id","createId","isCompleted","trim","this","className","placeholder","React","Component","Header","isChecked","type","checked","htmlFor","title","Todo","PropTypes","shape","bool","string","item","editMode","changeCompleteness","prevState","setEditMode","handleInput","handleEndEditing","keyCode","handleTodoEdit","handleEndEditingOnBlur","destroy","onDoubleClick","onClick","onKeyDown","onBlur","TodoList","items","destroyTodo","map","key","Filter","name","setAsSelected","isActive","activeButton","filterNames","Filters","handleActiveButton","selectedFilter","TodoApp","todos","todosOnView","isAllTodoCompleted","clearCompletedTodos","filter","todoFilterByFilterName","filterName","handleActiveFilter","handleNewToDo","handleIsCompletedTodo","taskId","handleDestroy","handleIsAllTodoCompleted","JSON","parse","localStorage","getItem","setItem","stringify","tasks","UnCompletedTodosLeft","length","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.241ff465.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { v4 as createId } from 'uuid';\n\nexport class AddTodo extends React.Component {\n  state = {\n    value: '',\n  };\n\n  onChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({ value: value.trimStart() });\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n\n    const { addTodo } = this.props;\n    const { value } = this.state;\n    const todo = {\n      id: createId(),\n      isCompleted: false,\n      value: value.trim(),\n    };\n\n    if ((!value.trim())) {\n      return;\n    }\n\n    addTodo(todo);\n    this.setState({\n      value: '',\n    });\n  }\n\n  render() {\n    const { onChange, onSubmit } = this;\n    const { value } = this.state;\n\n    return (\n      <form className=\"form\" onSubmit={onSubmit}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={value}\n          onChange={onChange}\n        />\n      </form>\n    );\n  }\n}\n\nAddTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { AddTodo } from './AddTodo';\n\nexport const Header = (props) => {\n  const { addTodo, isChecked, onChange } = props;\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={onChange}\n        checked={isChecked}\n      />\n      <label\n        htmlFor=\"toggle-all\"\n        title={isChecked\n          ? 'Mark all as active'\n          : 'Mark all as complete'\n        }\n      >\n        Mark all\n      </label>\n\n      <AddTodo addTodo={addTodo} />\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  addTodo: PropTypes.func.isRequired,\n  isChecked: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoShape } from './Shapes';\n\nexport class Todo extends React.Component {\n  state = {\n    id: this.props.item.id,\n    value: this.props.item.value,\n    isCompleted: this.props.item.isCompleted,\n    editMode: '',\n  }\n\n  componentDidUpdate() {\n\n  }\n\n  onChange = () => {\n    this.props.changeCompleteness(this.state.id);\n    this.setState(prevState => ({\n      isCompleted: !prevState.isCompleted,\n    }));\n  }\n\n  setEditMode = () => {\n    this.setState({\n      editMode: 'editing',\n    });\n  }\n\n  handleInput = (event) => {\n    const { value } = event.target;\n\n    this.setState({ value: value.trimStart() });\n  }\n\n  handleEndEditing = (event) => {\n    if (event.keyCode === 13) {\n      const { id, value } = this.state;\n      const { handleTodoEdit } = this.props;\n\n      this.setState({\n        editMode: '',\n      });\n\n      handleTodoEdit(id, value);\n    }\n  }\n\n  handleEndEditingOnBlur = () => {\n    const { id, value } = this.state;\n    const { handleTodoEdit } = this.props;\n\n    this.setState({\n      editMode: '',\n    });\n\n    handleTodoEdit(id, value);\n  }\n\n  render() {\n    const { onChange,\n      setEditMode,\n      handleInput,\n      handleEndEditing,\n      handleEndEditingOnBlur } = this;\n    const { id, value, editMode } = this.state;\n    const { destroy } = this.props;\n    let { isCompleted } = this.props.item;\n\n    if ((typeof isCompleted) === 'boolean') {\n      if (isCompleted) {\n        isCompleted = 'completed';\n      } else if (!isCompleted) {\n        isCompleted = '';\n      }\n    }\n\n    return (\n      <li className={`${editMode || isCompleted}`}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={id}\n            checked={!!isCompleted}\n            onChange={onChange}\n          />\n          <label htmlFor=\"todo-1\" onDoubleClick={setEditMode}>{value}</label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => destroy(id)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={value}\n          onChange={handleInput}\n          onKeyDown={handleEndEditing}\n          onBlur={handleEndEditingOnBlur}\n        />\n      </li>\n    );\n  }\n}\n\nTodo.propTypes = {\n  destroy: PropTypes.func.isRequired,\n  changeCompleteness: PropTypes.func.isRequired,\n  item: TodoShape.isRequired,\n  handleTodoEdit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = PropTypes.shape({\n  isCompleted: PropTypes.bool,\n  id: PropTypes.string,\n  value: PropTypes.string,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Todo } from './Todo';\nimport { TodoShape } from './Shapes';\n\nexport const TodoList = (props) => {\n  const { items, changeCompleteness, destroyTodo, handleTodoEdit } = props;\n\n  return (\n    <ul className=\"todo-list\">\n      {items.map(item => (\n        <Todo\n          key={item.id}\n          item={item}\n          changeCompleteness={changeCompleteness}\n          destroy={destroyTodo}\n          handleTodoEdit={handleTodoEdit}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(TodoShape).isRequired,\n  changeCompleteness: PropTypes.func.isRequired,\n  destroyTodo: PropTypes.func.isRequired,\n  handleTodoEdit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Filter = (props) => {\n  const { name, setAsSelected, activeButton } = props;\n  const isActive = activeButton === name;\n\n  return (\n    <li>\n      <button\n        type=\"button\"\n        name={name}\n        className={isActive ? 'selected' : ''}\n        onClick={setAsSelected}\n      >\n        {name}\n      </button>\n    </li>\n  );\n};\n\nFilter.propTypes = {\n  name: PropTypes.string.isRequired,\n  setAsSelected: PropTypes.func.isRequired,\n  activeButton: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Filter } from './Filter';\n\nconst filterNames = ['All', 'Active', 'Completed'];\n\nexport class Filters extends React.Component {\n  state = {\n    activeButton: '',\n  }\n\n  handleActiveButton = (name) => {\n    this.setState({\n      activeButton: name,\n    }, this.props.selectedFilter(name));\n  }\n\n  render() {\n    const { activeButton } = this.state;\n\n    return (\n      <ul className=\"filters\">\n        {filterNames.map(name => (\n          <Filter\n            activeButton={activeButton}\n            key={name}\n            name={name}\n            setAsSelected={() => this.handleActiveButton(name)}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nFilters.propTypes = {\n  selectedFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { Header } from './Header';\nimport { TodoList } from './TodoList';\nimport { Filters } from './Filters';\n\nexport class TodoApp extends React.Component {\n  state = {\n    todos: [],\n    todosOnView: '',\n    isAllTodoCompleted: false,\n  };\n\n  componentDidMount() {\n    const todos = JSON.parse(\n      localStorage.getItem('TodoList'),\n    ) || [];\n    const isAllTodoCompleted = JSON.parse(\n      localStorage.getItem('TodoCompleteness'),\n    ) || false;\n\n    this.setState({\n      todos,\n      isAllTodoCompleted,\n    });\n  }\n\n  componentDidUpdate() {\n    const { todos, isAllTodoCompleted } = this.state;\n\n    localStorage.setItem(\n      'TodoList', JSON.stringify(todos),\n    );\n    localStorage.setItem(\n      'TodoCompleteness', JSON.stringify(isAllTodoCompleted),\n    );\n  }\n\n  handleTodoEdit = (id, value) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            value,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  clearCompletedTodos = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(\n        ({ isCompleted }) => isCompleted === false,\n      ),\n    }));\n  }\n\n  todoFilterByFilterName = (filterName) => {\n    const { todos } = this.state;\n\n    if (filterName === 'All') {\n      return todos;\n    }\n\n    if (filterName === 'Active') {\n      return todos.filter(({ isCompleted }) => isCompleted === false);\n    }\n\n    if (filterName === 'Completed') {\n      return todos.filter(({ isCompleted }) => isCompleted === true);\n    }\n\n    return todos;\n  }\n\n  handleActiveFilter = (name) => {\n    this.setState({\n      todosOnView: name,\n    });\n  }\n\n  handleNewToDo = (todo) => {\n    this.setState(prevState => ({\n      todos: [\n        todo,\n        ...prevState.todos,\n      ],\n    }));\n  }\n\n  handleIsCompletedTodo = (taskId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== taskId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted,\n        };\n      }),\n    }));\n  }\n\n  handleDestroy = (taskId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(({ id }) => id !== taskId),\n    }));\n  }\n\n  handleIsAllTodoCompleted = () => {\n    this.setState(prevState => ({\n      isAllTodoCompleted: !prevState.isAllTodoCompleted,\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        isCompleted: !prevState.isAllTodoCompleted,\n      })),\n    }));\n  }\n\n  render() {\n    const { handleNewToDo,\n      handleIsCompletedTodo,\n      handleDestroy,\n      handleActiveFilter,\n      todoFilterByFilterName,\n      handleIsAllTodoCompleted,\n      clearCompletedTodos, handleTodoEdit } = this;\n    const { todosOnView, todos, isAllTodoCompleted } = this.state;\n    const tasks = todoFilterByFilterName(todosOnView);\n    const UnCompletedTodosLeft = todos.filter(\n      ({ isCompleted }) => isCompleted === false,\n    ).length;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          addTodo={handleNewToDo}\n          onChange={handleIsAllTodoCompleted}\n          isChecked={isAllTodoCompleted}\n        />\n\n        <section className=\"main\">\n          <TodoList\n            items={tasks}\n            changeCompleteness={handleIsCompletedTodo}\n            destroyTodo={handleDestroy}\n            handleTodoEdit={handleTodoEdit}\n          />\n        </section>\n\n        {!!todos.length && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${UnCompletedTodosLeft} items left`}\n            </span>\n\n            <Filters selectedFilter={handleActiveFilter} />\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearCompletedTodos}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )}\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\n\nfunction App() {\n  return (\n    <TodoApp />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}