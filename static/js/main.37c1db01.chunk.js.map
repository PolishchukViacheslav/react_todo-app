{"version":3,"sources":["components/AddTodo.js","components/Header.js","components/Todo.js","components/Shapes.js","components/TodoList.js","components/Filter.js","components/Filters.js","components/TodoApp.js","App.js","index.js"],"names":["AddTodo","state","value","onChange","event","target","setState","trimStart","onSubmit","preventDefault","addTodo","props","id","createId","isCompleted","trim","this","className","placeholder","React","Component","Header","onClick","type","htmlFor","title","Todo","PropTypes","shape","bool","string","item","changeCompleteness","prevState","destroy","TodoList","items","destroyTodo","map","key","Filter","name","setAsSelected","isActive","activeButton","filterNames","Filters","handleActiveButton","selectedFilter","TodoApp","todos","todosOnView","isAllTodoCompleted","clearCompletedTodos","filter","todoFilterByFilterName","filterName","todo","handleActiveFilter","handleNewToDo","handleIsCompletedTodo","taskId","handleDestroy","handleIsAllTodoCompleted","tasks","UnCompletedTodosLeft","length","localStorage","setItem","JSON","stringify","App","ReactDOM","render","document","getElementById"],"mappings":"gTAKaA,EAAb,4MACEC,MAAQ,CACNC,MAAO,IAFX,EAKEC,SAAW,SAACC,GAAW,IACbF,EAAUE,EAAMC,OAAhBH,MAER,EAAKI,SAAS,CAAEJ,MAAOA,EAAMK,eARjC,EAWEC,SAAW,SAACJ,GACVA,EAAMK,iBADc,IAGZC,EAAY,EAAKC,MAAjBD,QACAR,EAAU,EAAKD,MAAfC,MAORQ,EANa,CACXE,GAAIC,cACJC,aAAa,EACbZ,MAAOA,EAAMa,SAIf,EAAKT,SAAS,CACZJ,MAAO,MAxBb,uDA4BY,IACAC,EAAuBa,KAAvBb,SAAUK,EAAaQ,KAAbR,SACVN,EAAUc,KAAKf,MAAfC,MAER,OACE,0BAAMe,UAAU,OAAOT,SAAUA,GAC/B,2BACES,UAAU,WACVC,YAAY,yBACZhB,MAAOA,EACPC,SAAUA,SAtCpB,GAA6BgB,IAAMC,WCAtBC,EAAS,SAACV,GAAW,IACxBW,EAAqBX,EAArBW,QAASZ,EAAYC,EAAZD,QAEjB,OACE,4BAAQO,UAAU,UAChB,qCACA,2BACEM,KAAK,WACLX,GAAG,aACHK,UAAU,aACVK,QAASA,IAEX,2BACEE,QAAQ,aACRC,MAAM,wBAFR,wBAOA,kBAAC,EAAD,CAASf,QAASA,M,gBCpBXgB,GCFYC,IAAUC,MAAM,CACvCd,YAAaa,IAAUE,KACvBjB,GAAIe,IAAUG,OACd5B,MAAOyB,IAAUG,SDDnB,4MACE7B,MAAQ,CACNW,GAAI,EAAKD,MAAMoB,KAAKnB,GACpBV,MAAO,EAAKS,MAAMoB,KAAK7B,MACvBY,YAAa,EAAKH,MAAMoB,KAAKjB,aAJjC,EAOEX,SAAW,WACT,EAAKQ,MAAMqB,mBAAmB,EAAK/B,MAAMW,IACzC,EAAKN,UAAS,SAAA2B,GAAS,MAAK,CAC1BnB,aAAcmB,EAAUnB,iBAV9B,uDAcY,IACAX,EAAaa,KAAbb,SADD,EAEea,KAAKf,MAAnBW,EAFD,EAECA,GAAIV,EAFL,EAEKA,MACJgC,EAAYlB,KAAKL,MAAjBuB,QACApB,EAAgBE,KAAKL,MAAMoB,KAA3BjB,YAER,OACE,wBAAIG,UAAWH,EAAc,YAAc,IACzC,yBAAKG,UAAU,QACb,2BACEM,KAAK,WACLN,UAAU,SACVL,GAAIA,EACJT,SAAUA,IAEZ,2BAAOqB,QAAQ,UAAUtB,GACzB,4BACEqB,KAAK,SACLN,UAAU,UACVK,QAAS,kBAAMY,EAAQtB,OAG3B,2BAAOW,KAAK,OAAON,UAAU,cApCrC,GAA0BE,IAAMC,YEEnBe,EAAW,SAACxB,GAAW,IAC1ByB,EAA2CzB,EAA3CyB,MAAOJ,EAAoCrB,EAApCqB,mBAAoBK,EAAgB1B,EAAhB0B,YAEnC,OACE,wBAAIpB,UAAU,aACXmB,EAAME,KAAI,SAAAP,GAAI,OACb,kBAAC,EAAD,CACEQ,IAAKR,EAAKnB,GACVmB,KAAMA,EACNC,mBAAoBA,EACpBE,QAASG,OAIb,wBAAIpB,UAAU,WACZ,yBAAKA,UAAU,QACb,2BAAOM,KAAK,WAAWN,UAAU,SAASL,GAAG,WAC7C,2BAAOY,QAAQ,UAAf,WACA,4BAAQD,KAAK,SAASN,UAAU,aAElC,2BAAOM,KAAK,OAAON,UAAU,YCvBxBuB,EAAS,SAAC7B,GAAW,IACxB8B,EAAsC9B,EAAtC8B,KAAMC,EAAgC/B,EAAhC+B,cACRC,EADwChC,EAAjBiC,eACKH,EAElC,OACE,4BACE,4BACElB,KAAK,SACLkB,KAAMA,EACNxB,UAAW0B,EAAW,WAAa,GACnCrB,QAASoB,GAERD,KCVHI,EAAc,CAAC,MAAO,SAAU,aAEzBC,EAAb,4MACE7C,MAAQ,CACN2C,aAAc,IAFlB,EAKEG,mBAAqB,SAACN,GACpB,EAAKnC,SAAS,CACZsC,aAAcH,GACb,EAAK9B,MAAMqC,eAAeP,KARjC,uDAWY,IAAD,OACCG,EAAiB5B,KAAKf,MAAtB2C,aAER,OACE,wBAAI3B,UAAU,WACX4B,EAAYP,KAAI,SAAAG,GAAI,OACnB,kBAAC,EAAD,CACEG,aAAcA,EACdL,IAAKE,EACLA,KAAMA,EACNC,cAAe,kBAAM,EAAKK,mBAAmBN,cArBzD,GAA6BtB,IAAMC,WCFtB6B,EAAb,4MACEhD,MAAQ,CACNiD,MAAO,GACPC,YAAa,GACbC,oBAAoB,GAJxB,EAqBEC,oBAAsB,WACpB,EAAK/C,UAAS,SAAA2B,GAAS,MAAK,CAC1BiB,MAAOjB,EAAUiB,MAAMI,QACrB,mBAAqC,IAArC,EAAGxC,oBAxBX,EA6BEyC,uBAAyB,SAACC,GAAgB,IAAD,EACD,EAAKvD,MAAnCiD,EAD+B,EAC/BA,MAER,OAHuC,EACxBE,mBAGNF,EAAMZ,KAAI,SAAAmB,GAAI,kCAChBA,GADgB,IAEnB3C,aAAa,OAIE,QAAf0C,EACKN,EAGU,WAAfM,EACKN,EAAMI,QAAO,mBAAqC,IAArC,EAAGxC,eAGN,cAAf0C,EACKN,EAAMI,QAAO,mBAAqC,IAArC,EAAGxC,eAGlBoC,GAnDX,EAsDEQ,mBAAqB,SAACjB,GACpB,EAAKnC,SAAS,CACZ6C,YAAaV,KAxDnB,EA4DEkB,cAAgB,SAACF,GACf,EAAKnD,UAAS,SAAA2B,GAAS,MAAK,CAC1BiB,MAAM,CACJO,GADG,mBAEAxB,EAAUiB,aAhErB,EAqEEU,sBAAwB,SAACC,GACvB,EAAKvD,UAAS,SAAA2B,GAAS,MAAK,CAC1BiB,MAAOjB,EAAUiB,MAAMZ,KAAI,SAACmB,GAC1B,OAAIA,EAAK7C,KAAOiD,EACPJ,EAGF,2BACFA,GADL,IAEE3C,aAAc2C,EAAK3C,sBA9E7B,EAoFEgD,cAAgB,SAACD,GACf,EAAKvD,UAAS,SAAA2B,GAAS,MAAK,CAC1BiB,MAAOjB,EAAUiB,MAAMI,QAAO,qBAAG1C,KAAgBiD,UAtFvD,EA0FEE,yBAA2B,WACzB,EAAKzD,UAAS,SAAA2B,GAAS,MAAK,CAC1BmB,oBAAqBnB,EAAUmB,wBA5FrC,uDAgGY,IACAO,EAMkB3C,KANlB2C,cACNC,EAKwB5C,KALxB4C,sBACAE,EAIwB9C,KAJxB8C,cACAJ,EAGwB1C,KAHxB0C,mBACAH,EAEwBvC,KAFxBuC,uBACAQ,EACwB/C,KADxB+C,yBACAV,EAAwBrC,KAAxBqC,oBAPK,EAQwBrC,KAAKf,MAA5BkD,EARD,EAQCA,YAAaD,EARd,EAQcA,MACfc,EAAQT,EAAuBJ,GAC/Bc,EAAuBf,EAAMI,QACjC,mBAAqC,IAArC,EAAGxC,eACHoD,OAIF,OAFAC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUpB,IAG9C,6BAASjC,UAAU,WACjB,kBAAC,EAAD,CACEP,QAASiD,EACTrC,QAASyC,IAGX,6BAAS9C,UAAU,QACjB,kBAAC,EAAD,CACEmB,MAAO4B,EACPhC,mBAAoB4B,EACpBvB,YAAayB,KAIjB,4BAAQ7C,UAAU,UAChB,0BAAMA,UAAU,cAAhB,UACMgD,EADN,gBAIA,kBAAC,EAAD,CAASjB,eAAgBU,IAEzB,4BACEnC,KAAK,SACLN,UAAU,kBACVK,QAAS+B,GAHX,yBAtIV,GAA6BlC,IAAMC,WCIpBmD,MANf,WACE,OACE,kBAAC,EAAD,OCCJC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.37c1db01.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { v4 as createId } from 'uuid';\n\nexport class AddTodo extends React.Component {\n  state = {\n    value: '',\n  };\n\n  onChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({ value: value.trimStart() });\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n\n    const { addTodo } = this.props;\n    const { value } = this.state;\n    const todo = {\n      id: createId(),\n      isCompleted: false,\n      value: value.trim(),\n    };\n\n    addTodo(todo);\n    this.setState({\n      value: '',\n    });\n  }\n\n  render() {\n    const { onChange, onSubmit } = this;\n    const { value } = this.state;\n\n    return (\n      <form className=\"form\" onSubmit={onSubmit}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={value}\n          onChange={onChange}\n        />\n      </form>\n    );\n  }\n}\n\nAddTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { AddTodo } from './AddTodo';\n\nexport const Header = (props) => {\n  const { onClick, addTodo } = props;\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onClick={onClick}\n      />\n      <label\n        htmlFor=\"toggle-all\"\n        title=\"Mark all as complete\"\n      >\n        Mark all as complete\n      </label>\n\n      <AddTodo addTodo={addTodo} />\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoShape } from './Shapes';\n\nexport class Todo extends React.Component {\n  state = {\n    id: this.props.item.id,\n    value: this.props.item.value,\n    isCompleted: this.props.item.isCompleted,\n  }\n\n  onChange = () => {\n    this.props.changeCompleteness(this.state.id);\n    this.setState(prevState => ({\n      isCompleted: !prevState.isCompleted,\n    }));\n  }\n\n  render() {\n    const { onChange } = this;\n    const { id, value } = this.state;\n    const { destroy } = this.props;\n    const { isCompleted } = this.props.item;\n\n    return (\n      <li className={isCompleted ? 'completed' : ''}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={id}\n            onChange={onChange}\n          />\n          <label htmlFor=\"todo-1\">{value}</label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => destroy(id)}\n          />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n    );\n  }\n}\n\nTodo.propTypes = {\n  destroy: PropTypes.func.isRequired,\n  changeCompleteness: PropTypes.func.isRequired,\n  item: TodoShape.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = PropTypes.shape({\n  isCompleted: PropTypes.bool,\n  id: PropTypes.string,\n  value: PropTypes.string,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Todo } from './Todo';\nimport { TodoShape } from './Shapes';\n\nexport const TodoList = (props) => {\n  const { items, changeCompleteness, destroyTodo } = props;\n\n  return (\n    <ul className=\"todo-list\">\n      {items.map(item => (\n        <Todo\n          key={item.id}\n          item={item}\n          changeCompleteness={changeCompleteness}\n          destroy={destroyTodo}\n        />\n      ))}\n\n      <li className=\"editing\">\n        <div className=\"view\">\n          <input type=\"checkbox\" className=\"toggle\" id=\"todo-3\" />\n          <label htmlFor=\"todo-3\">zxcvbnm</label>\n          <button type=\"button\" className=\"destroy\" />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(TodoShape).isRequired,\n  changeCompleteness: PropTypes.func.isRequired,\n  destroyTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Filter = (props) => {\n  const { name, setAsSelected, activeButton } = props;\n  const isActive = activeButton === name;\n\n  return (\n    <li>\n      <button\n        type=\"button\"\n        name={name}\n        className={isActive ? 'selected' : ''}\n        onClick={setAsSelected}\n      >\n        {name}\n      </button>\n    </li>\n  );\n};\n\nFilter.propTypes = {\n  name: PropTypes.string.isRequired,\n  setAsSelected: PropTypes.func.isRequired,\n  activeButton: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Filter } from './Filter';\n\nconst filterNames = ['All', 'Active', 'Completed'];\n\nexport class Filters extends React.Component {\n  state = {\n    activeButton: '',\n  }\n\n  handleActiveButton = (name) => {\n    this.setState({\n      activeButton: name,\n    }, this.props.selectedFilter(name));\n  }\n\n  render() {\n    const { activeButton } = this.state;\n\n    return (\n      <ul className=\"filters\">\n        {filterNames.map(name => (\n          <Filter\n            activeButton={activeButton}\n            key={name}\n            name={name}\n            setAsSelected={() => this.handleActiveButton(name)}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nFilters.propTypes = {\n  selectedFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { Header } from './Header';\nimport { TodoList } from './TodoList';\nimport { Filters } from './Filters';\n\nexport class TodoApp extends React.Component {\n  state = {\n    todos: [],\n    todosOnView: '',\n    isAllTodoCompleted: false,\n  };\n\n  // componentDidMount() {\n  //   const todos = JSON.parse(localStorage.getItem('TodoList'));\n  //   console.log(todos);\n  //   // this.setState({\n  //   //   todos:\n  //   // })\n  // }\n\n  // componentWillUnmount() {\n  //   const { todos } = this.state;\n\n  //   localStorage.setItem('TodoList', JSON.stringify(todos));\n  // }\n\n  clearCompletedTodos = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(\n        ({ isCompleted }) => isCompleted === false,\n      ),\n    }));\n  }\n\n  todoFilterByFilterName = (filterName) => {\n    const { todos, isAllTodoCompleted } = this.state;\n\n    if (isAllTodoCompleted) {\n      return todos.map(todo => ({\n        ...todo,\n        isCompleted: true,\n      }));\n    }\n\n    if (filterName === 'All') {\n      return todos;\n    }\n\n    if (filterName === 'Active') {\n      return todos.filter(({ isCompleted }) => isCompleted === false);\n    }\n\n    if (filterName === 'Completed') {\n      return todos.filter(({ isCompleted }) => isCompleted === true);\n    }\n\n    return todos;\n  }\n\n  handleActiveFilter = (name) => {\n    this.setState({\n      todosOnView: name,\n    });\n  }\n\n  handleNewToDo = (todo) => {\n    this.setState(prevState => ({\n      todos: [\n        todo,\n        ...prevState.todos,\n      ],\n    }));\n  }\n\n  handleIsCompletedTodo = (taskId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== taskId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted,\n        };\n      }),\n    }));\n  }\n\n  handleDestroy = (taskId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(({ id }) => id !== taskId),\n    }));\n  }\n\n  handleIsAllTodoCompleted = () => {\n    this.setState(prevState => ({\n      isAllTodoCompleted: !prevState.isAllTodoCompleted,\n    }));\n  }\n\n  render() {\n    const { handleNewToDo,\n      handleIsCompletedTodo,\n      handleDestroy,\n      handleActiveFilter,\n      todoFilterByFilterName,\n      handleIsAllTodoCompleted,\n      clearCompletedTodos } = this;\n    const { todosOnView, todos } = this.state;\n    const tasks = todoFilterByFilterName(todosOnView);\n    const UnCompletedTodosLeft = todos.filter(\n      ({ isCompleted }) => isCompleted === false,\n    ).length;\n\n    localStorage.setItem('TodoList', JSON.stringify(todos));\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          addTodo={handleNewToDo}\n          onClick={handleIsAllTodoCompleted}\n        />\n\n        <section className=\"main\">\n          <TodoList\n            items={tasks}\n            changeCompleteness={handleIsCompletedTodo}\n            destroyTodo={handleDestroy}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${UnCompletedTodosLeft} items left`}\n          </span>\n\n          <Filters selectedFilter={handleActiveFilter} />\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={clearCompletedTodos}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\n\nfunction App() {\n  return (\n    <TodoApp />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}